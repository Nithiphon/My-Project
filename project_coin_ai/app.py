# app.py
import streamlit as st
from ultralytics import YOLO
from PIL import Image
import cv2
import numpy as np
import os

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÉ‡∏ä‡πâ cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥)
@st.cache_resource
def load_model():
    if not os.path.exists("best.pt"):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå best.pt! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.stop()
    return YOLO("best.pt")

model = load_model()
VALUE_MAP = {"1baht": 1, "5baht": 5, "10baht": 10}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="ü™ô ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏ó‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    page_icon="ü™ô",
    layout="centered"
)

st.title("ü™ô ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏ó‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
st.markdown("""
‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç **1, 5 ‡∏´‡∏£‡∏∑‡∏≠ 10 ‡∏ö‡∏≤‡∏ó**  
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‚Üí ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!
""")

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
uploaded_file = st.file_uploader(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (JPG/PNG)",
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None:
    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç..."):
        try:
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            results = model(image, conf=0.5)
            result = results[0]

            # ‡∏ß‡∏≤‡∏î bounding box
            plotted_img = result.plot()  # BGR
            plotted_rgb = cv2.cvtColor(plotted_img, cv2.COLOR_BGR2RGB)
            st.image(plotted_rgb, caption="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", use_column_width=True)

            # ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
            coin_count = {"1baht": 0, "5baht": 0, "10baht": 0}
            total_value = 0

            for box in result.boxes:
                cls_id = int(box.cls[0])
                class_name = model.names[cls_id]
                if class_name in VALUE_MAP:
                    coin_count[class_name] += 1
                    total_value += VALUE_MAP[class_name]

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
            has_coin = False
            for coin, count in coin_count.items():
                if count > 0:
                    has_coin = True
                    value = VALUE_MAP[coin]
                    st.write(f"ü™ô **{coin}**: {count} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‚Üí {count * value} ‡∏ö‡∏≤‡∏ó")

            if has_coin:
                st.success(f"üí∞ **‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°: {total_value} ‡∏ö‡∏≤‡∏ó**")
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")